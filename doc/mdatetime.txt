The Date Time Javascript Library

Author(copyright): Edward Macnaghten <eddy@edlsystems.com>
Version 2.0 - 17-March-2019
License: GPL-V3.0

INTRODUCTION

This is maninly a wrapper around the Javascript "Date" object to make it easier
to incorporate.

Dates are complex. If you do not think so, then imagine the difference between
adding months and adding days to a date, then adding months plus some day, etc.
That is inconsistent depending on when in the year you do so.

That is before you think of fractions of months.

That is before you consider leap years.

As for hours, minutes and seconds, you have a nightmare with time zones.
Now put in the equation daylight saving.

If you mention "Leap Seconds" to a developer involved in time and dates then
the developer will totally ignore you (which is whart most of us do with
leap seconds, they are ignored here).

This sets of objects tries to make things easier for an application developer.
It assumes:
 1 - Time zones are irrelevant.  Most instances of applications in the real
     world are localised, so only a single time zone is relevant.
 2 - Daylight Savings errors we can live with, so long as number of days
     between dates is OK and differences in time can ignore them.

There are three (user) objects

 MDate       - A date class, deals with years, months and days only.  No time.
 MTime       - A time class, deals with Hours, minutes, seconds and
               milliseconds only.  Dates are irrelevant.
               This doubles as an interval class, so number of ays can be
               incorporated here too.
 MDateTime   - A DateTime class, handles dates and times.

The "MDate" and "MDateTime" are wrappers arround a "Date" object.  The "MTime"
class stores it's information as a series of integers.

They also support a concept of "null" value, where a blank or null value
is supplied.

Dependencies
~~~~~~~~~~~~

The following MUutilities files are required to be included:
 mdecimal.js - To provice the MDecimal object
 mutilbase.js - To provice the the base MUtilBase class


Methods and Functions
~~~~~~~~~~~~~~~~~~~~~

A Summary copied from the source file:

 Following are summary of methods and functions, not all apply to
 all the above classes, they do not where irrevelant

 Where an MDate, MTime or MDateTime object is required, and the appropriate
 one is not provided, the system will try and create the appropriate
 object using the supplied argument as the creation one.
 i.e:
 setMDate("2019-03-02")
   is same as
 setMDate(new MDate("2019-03-02"))

 All numbers passed can be floats, integers, strings(with numbers in it)
 or MDecimal objects

 All three classes derive from a MDateTimeBase class

 An "MDateTimeMagic(arg)" function is supplied,  this will return null
 (on error) or an instance of one of the three classes, which one depends
 on the argument supplied.

 The Class method/function overview:

 Creation:
 ~~~~~~~~~
 new CLASS("NOW")        - Create object as of "now"
 new CLASS()             - Create object of NULL
 new CLASS(null)         - Same
 new CLASS("")           - Same
 new CLASS(object)       - Cast from MDate, MDateTime, MTime and Date objects
 new CLASS(string)       - Set from ISO string (No time zones)
 new CLASS(number)       - Set from JS milliseconds
 new CLASS(all_else)     - Does it's best from "string"

 Setting:
 ~~~~~~~~
 setMDate(MDate_obj)     - Sets date portion of object
 setMTime(MDate_obj)     - Sets time portion of object
 setMDateTime(MDate_obj) - Sets relevant parts of object
 assemble(integers)      - Assembles from integers
                           Only supply integers relevant to object
                           YYYY, MM, DD for MDate
                           HH, MM, SS, MMMM for MTime
                           All 7 for MDateTime
 setDate(day)            - Sets the Date (day) portion of Date
 setMonth(month)         - Sets the Month portion of Date
                            Months start at 1 (Jan),  and ends at 12 (Dec)
 setYear(year)           - Sets the (full) year
 setHours(hour)          - Sets the hour part of time (0 - 23)
 setMinutes(minutes)     - Sets the minutes part of time (0 - 59)
 setSecconds(seconds)    - Sets the seconds part of time (0 - 59)
 setMillisecconds(mils)  - Sets the milliseconds part of time (0 - 999)
 setTime(milliseconds)   - Sets the time based on milliseconds, (0 - 86400000)
 setDays(days)           - Only applciable to MTime as an interval
                           sets the number of days
 zero()                  - Only applicable to MTime - sets to midnight

 Getting:
 ~~~~~~~~
 toString()              - Returns an ISO string representation of the object
 toShortString()         - MTime objects ony - retutns string HH:MM
 getDays()               - MTime intervals only - get number of days as integer
 getYYYY()               - YYYY can be Year, Month, Date (day of month),
                           Hours, Minutes, Seconds, Milliseconds, Day (day of week)
                           or Time (number of milliseconds since midnight)


 Manipulating:
 ~~~~~~~~~~~~~
 addXXXX(amoubnt)        - Adds units to object, XXXX can be:
                           Miliseconds, Seconds, Minutes, Hours,
                           Days, Months, Years
 addMTime(MTime_obj)     - Can also be MTime for adding an mtime interval

 floor()                 - Truncates the time portion - MDateTime only

 Extracting
 ~~~~~~~~~~
 plusXXXXX(amnt)         - Like add.... except it returns new object
                           rather than manipulates current
 diffXXXX(object)        - Difference between this and object (of same type)
                           return a number (Float)
 copy()                  - Creates and returns a deep copy of the object

 Testing
 ~~~~~~~

 isNull()                - Returns true if null
 isValid()               - Returns false if not valid

 All comparisons change "other" to "this" object type

 cmp(other)              - Returns 0 if equal to other
                                   1 if greater than other
                                   -1 if less than other
 lt(other)               - Returns true if this less than other
 gt(other)               - Returns true if this greater than other
 le(other)               - Returns true if less than or equal to other
 ge(other)               - Returns true if greater than or equal to other
