The Date Time Javascript Library

Author(copyright): Edward Macnaghten <eddy@edlsystems.com>
Version 2.0 - 17-March-2019
License: GPL-V3.0

INTRODUCTION

This is maninly a wrapper around the Javascript "Date" object to make it easier
to incorporate.

Dates are complex. If you do not think so, then imagine the difference between
adding months and adding days to a date, then adding months plus some day, etc.
That is inconsistent depending on when in the year you do so.

That is before you think of fractions of months.

That is before you consider leap years.

As for hours, minutes and seconds, you have a nightmare with time zones.
Now put in the equation daylight saving.

If you mention "Leap Seconds" to a developer involved in time and dates then
the developer will totally ignore you (which is whart most of us do with
leap seconds, they are ignored here).

This sets of objects tries to make things easier for an application developer.
It assumes:
 1 - Time zones are irrelevant.  Most instances of applications in the real
     world are localised, so only a single time zone is relevant.
 2 - Daylight Savings errors we can live with, so long as number of days
     between dates is OK and differences in time can ignore them.

There are three (user) objects

 MDate       - A date class, deals with years, months and days only.  No time.
 MTime       - A time class, deals with Hours, minutes, seconds and
               milliseconds only.  Dates are irrelevant.
               This doubles as an interval class, so number of ays can be
               incorporated here too.
 MDateTime   - A DateTime class, handles dates and times.

The "MDate" and "MDateTime" are wrappers arround a "Date" object.  The "MTime"
class stores it's information as a series of integers.

Dependencies
~~~~~~~~~~~~

The following MUutilities files are required to be included:
 mdecimal.js - To provice the MDecimal object
 mglobals.js - To provice the mglobals array


Methods and Functions
~~~~~~~~~~~~~~~~~~~~~

A Summary copied from the source file:

 Following are summary of methods and functions, not all apply to
 all the above classes, they do not where irrevelant

 Where an MDate, MTime or MDateTime object is required, and the appropriate
 one is not provided, the system will try and create the appropriate
 object using the supplied argument as the creation one.
 i.e:
 setMDate("2019-03-02")
   is same as
 setMDate(new MDate("2019-03-02"))

 All numbers passed can be floats, integers, strings(with numbers in it)
 or MDecimal objects

 All three classes derive from a MDateTimeBase class

 An "MDateTimeMagic(arg)" function is supplied,  this will return null
 (on error) or an instance of one of the three classes, which one depends
 on the argument supplied.

 The Class method/function overview:

 Creation:
 ~~~~~~~~~
 new CLASS("NOW")        - Create object as of "now"
 new CLASS()             - Create object as of "now" for MDate, MDateTime
                           Midnight for MTime
 new CLASS(object)       - Cast from MDate, MDateTime, MTime and Date objects
 new CLASS(string)       - Set from ISO string (No time zones)
 new CLASS(number)       - Set from JS milliseconds
 new CLASS(all_else)     - Does it's best from "string"

 Setting:
 ~~~~~~~~
 setMDate(MDate_obj)     - Sets date portion of object
 setMTime(MDate_obj)     - Sets time portion of object
 setMDateTime(MDate_obj) - Sets relevant parts of object
 assemble(integers)      - Assembles from integers
                           Only supply integers relevant to object
                           YYYY, MM, DD for MDate
                           HH, MM, SS, MMMM for MTime
                           All 7 for MDateTime
 setDate(day)            - Sets the Date (day) portion of Date
 setMonth(month)         - Sets the Month portion of Date
                            Months start at 1 (Jan),  and ends at 12 (Dec)
 setYear(year)           - Sets the (full) year
 setHours(hour)          - Sets the hour part of time (0 - 23)
 setMinutes(minutes)     - Sets the minutes part of time (0 - 59)
 setSecconds(seconds)    - Sets the seconds part of time (0 - 59)
 setMillisecconds(mils)  - Sets the milliseconds part of time (0 - 999)
 setTime(milliseconds)   - Sets the time based on milliseconds, (0 - 86400000)
 setDays(days)           - Only applciable to MTime as an interval
                           sets the number of days

 Getting:
 ~~~~~~~~
 toString()              - Returns an ISO string representation of the object
 toShortString()         - MTime objects ony - retutns string HH:MM
 getDays()               - MTime intervals only - get number of days as integer
 getYYYY()               - YYYY can be Year, Month, Date (day of month),
                           Hours, Minutes, Seconds, Milliseconds, Day (day of week)
                           or Time (number of milliseconds since midnight)



 Manipulating:
 ~~~~~~~~~~~~~
 addXXXX(amoubnt)        - Adds units to object, XXXX can be:
                           Miliseconds, Seconds, Minutes, Hours,
                           Days, Months, Years
 addMTime(MTime_obj)     - Can also be MTime for adding an mtime interval

 floor()                 - Truncates the time portion - MDateTime only

 Extracting
 ~~~~~~~~~~
 plusXXXXX(amnt)         - Like add.... except it returns new object
                           rather than manipulates current
 diffXXXX(object)        - Difference between this and object (of same type)
                           return a number (Float)
 copy()                  - Creates and returns a deep copy of the object
As Javascript itself only uses floats for numbers, inaccuracies for large
monetry values can occur, especially if "pennies" are included as fractions.
This library tries to address this issue.  I have included further explanation
and documentation later in this readme.

INSTALLATION

Copy the "decimal.js" file where it can be loaded by the web page
(or whatever), and load it in using the
    <script type="text/javascript" path=path/to/the/decimal.js"></script>
mechanism, or equivalent if not a web page.

MECHANICS

Before going into the documentation I will describe how the library works.
Javascript uses (or meant to use) 64 bit floats, using the IEEE 754
specification.  This provides 1 bit for the sign, 11 bit for the exponent
and 52 bits for the mantissa.  This mechanics provides accuracy up to
the limit of the mantissa for integers (which is + or - 2 ^ 53, or
+/- 9,007,199,254,740,992.  However, if fractions are used it is
unlikely that the binary representation in the float is exactly equal
what it was "set" to, and these inaccuracies can be exagerated when
arithmetic operations are performed,  An example of this is is

    23.0 - 7.37

which when calculated as floats does not equal the correct answer.

The Decimal objct here addresses the problem by only storing numbers as
a set of integers.  One for the whole part, and one for the fraction(or what
is right of the decimal point). It also stores other relevant information in
the object if negative, if blank, and the numbe of decimal places there are).

The upshot of only storing integers is it can accurately represent a number
between +/- 9,007,199,254,740,992.000000000000000, up to 15 decimal places,
making it workable for money values.

The object handles additions and subtractions well, multiplication as best
it can, however division it simply converts the numbers to "floats" and
performs a system division before converting back.  The philosophy behind
that is that should you need to "divide" in accounting then you may be in
trouble anyway regarding penny perfect answers, as "rounding to the penny"
errors are likely to not be totally acurate anyway.

A way to divide some money into 4 "shares" the following method can be used:

    Start ith value "TotalAmount"
    "TotalAmount" / 4 - rounded to nearest penny -> "Share1"
    "TotalAmount" - "Share1" -> "WorkingAmount"
    "WorkingAmount" / 3 - rounded to nearest penny -> "Share 2"
    "WorkingAmount" - "Share2" -> "(new)WorkingAmount"
    "(new)WorkingAmount" / 2 - rounded to nearest penny -> "Share 3"
    "(new)"orkingAmount" - "Share 3" -> "Share 4"

Although not perfect, works.

MONEY AND PENNIES

This object has some "penny" functions and methods, that automatically round
numbers to nearest penny.  The "Penny" amounts are controlled by global
variables:

    DECIMAL_PENNIES         : The number of decimal places used for "pennies"
                              this would be 2 for USD
    DECIMAL_PENNY_UNIT      : The integer of the smalst "coin".
                              this would be 1 for USD (1 cent)

They default to 2 and 1 respectively (USD, UKP etc)

USAGE

Usage exmple is as follows

var x = new Decimal()  - Creates blank decimal objct
var x = new Decimal(number) - Creates decimal object giving value of number
   number can be: string, examples: "1.23" "-1.456" "3.00" "54"
                                    "" sets to null
                  javascript number (floating point)
                  null (Sets to null)
x.setValue(number) - Same as above on existing object
x.isNull()         - Returns true if null, false otherwise
x.isValid()        - Returns false if initialised incorrectly - will alseays be blank too
x.toString()       - Returns money number as string (null -> "")
                                          {decimals} must be >= 0
x.format(decimals) - Returns as string to {decimals} number of decimal places
                                               null -> ""
x.toFloat()        - Returns the number as a float (null returns null)
x.toNumber()       - Same as toFloat()
x.isInt()          - Returns true if an integer (no fraction), false if not
x.intPart()        - Returns int part of number (negative if appropriate)
x.fracPart()       - Returns fraction part of number as fraction (negative if appropriate)

Arithmatic, the "value" supplied can be string, number or Decimal (instance of this class)

x.add(value)       - Adds a value to object, returns current object
x.subtract(value)  - Subtracts a value from object, returns current object
x.multiply(value)  - Multiplies an object by value, returns current object
x.divide(value)    - Divides an object by value, returns current object
x.plus(value)      - Adds a value to this object and returns a new Decimal object
x.minus(value)     - Subtracts a value from this object and returns a new Decimal object
x.times(value)     - Multiplies a value and this object and returns a new Decimal object
x.over(value)      - Divides the object by the value and returns a new Decimal object

Comparisons

x.cmp(value)       - Returns 0 if equal, -1 if object < value, 1 if object > value
x.gt(value)        - Returns true if object > value, false otherwise
x.lt(value)        - Returns true if object < value, false otherwise
x.eq(value)        - Returns true if object = value, false otherwise

x.round(decimals)  - Rounds the value to decimals number of places (decimals must be >= 0)
x.floor(decimals)  - Rounds down the value to decimals number of places (decimals decimals must be >= 0)
x.ceil(decimals)   - Rounds up the value to decimals number of places (decimals must be >= 0)
x.fix(decimals)    - Truncates the fraction to decimals number of places (decimals must be >= 0)
x.fixup(decimals)  - Truncates the fraction to decimals number of places, always rounding to higer digit
                                           (decimals must be >= 0)

x.pennies(denom, unit)
                   - Returns number of pennies,
                     denom and unit default to DECIMAL_PENNIES and DECIMAL_PENNY_UNIT
                     denom (DECIMAL_PENNIES) is the number of decimal places pennies use up (2 for USD)
                     unit (DECIMAL_PENNY_UNIT) is the value of the smallest coin
x.roundPennies     - Rounds the number of decimal places to nearest penny
x.fixPennies       - Fix the number of decimal places to nearest penny (truncates)
x.fixupPennies     - Fix ups the number of decimal places to nearest penny (always rounds to higher digit)
x.floorPennies     - Rounds down (in value) to number of pennies
x.ceilPennies      - Rounds up (in value) to number of pennies

